设计系统和功能：理解需求
在设计一个系统或功能时，我们需要确保我们的设计满足需求。需求有两种类型：功能性需求和非功能性需求。

功能性需求
功能性需求定义了系统的行为——系统应该做什么。

示例：对于一个消息系统，功能性需求可能是：

系统必须允许应用程序交换消息。
非功能性需求
非功能性需求定义了系统的质量——系统应该如何表现。

示例：对于一个消息系统，非功能性需求可能包括：

系统应该具有可扩展性、高可用性和快速性。
面试中澄清需求的重要性
在面试中，面试官通常会含糊地陈述功能性需求，且可能完全不提及非功能性需求。这是有原因的：

数据收集：面试的重点是尽可能多地收集关于候选人的信息。
评估问题解决能力：通过以通用的形式提出问题，面试官可以评估你如何处理模糊性，能否识别系统的关键部分，并定义问题的范围。
了解你的方法：面试官想了解你在被录用后将如何解决实际问题。
另一个澄清需求（尤其是非功能性需求）的重要原因是，系统设计面试问题通常是开放性的，可能有多种解决方案。有许多概念、模式和技术可以应用，而它们都有各自的权衡。明确的非功能性需求有助于我们在这些权衡中做出选择，指导我们的设计决策。

示例：设计一个消息系统
让我们考虑一个消息系统的非功能性需求：可扩展性、高可用性和快速性。这些需求为我们如何设计系统提供了重要的洞见。

可扩展性
需要为写入和读取进行扩展：由于每条消息都会被写入并在稍后被消费，我们需要为写入和读取进行扩展。
分区消息：
策略：使用分区将消息存储在多个队列中，而不是单个队列。
分区策略：哈希策略可以有效地均衡消息分布。
快速存储消息：
内存中：使用有界队列以实现快速访问。
磁盘上：
仅追加日志：适用于顺序写入，效率高。
嵌入式数据库：
数据库类型：LSM 树数据库比 B 树在写入性能上更优。
扩展读取：
每个分区的消费者：为每个分区分配一个消费者，提高读取扩展性。
推送还是拉取模型：
使用拉取模型并支持长轮询：通过减少在没有新消息时的请求数量，提高读取效率。
高可用性
消息复制：
复制策略：通常使用基于主节点的复制（Leader-based Replication）。
主节点选举：需要实现主节点选举机制，可以使用协调服务或保证强一致性的数据库。
保护机制：
负载削减和限流：通过控制请求流量，防止系统过载。
Shuffle Sharding：分散负载，隔离故障。
反向代理：
简化客户端逻辑：通过处理分区发现和消息路由，简化消息生产者和消费者的客户端逻辑。
集中功能：实现负载均衡和请求路由等功能。
性能（速度）
批处理和压缩消息：提高吞吐量，降低延迟。
通信协议：
TCP 与 HTTP：在受信任的环境中，使用 TCP 可能更高效。
澄清假设：务必与面试官确认这些选择和假设。
识别非功能性需求的力量
这个练习展示了识别非功能性需求的重要性：

指导设计选择：了解需求有助于选择合适的技术和模式。
有效沟通：能够与面试官或团队成员进行有意义的讨论。
提高问题解决效率：使我们能够专注于满足系统需求的方法。
与面试官合作
协作：与面试官密切合作，定义需求并澄清模糊之处。
视角：将面试官视为未来的潜在团队成员，他们希望你成功。
展示技能：展示你如何处理问题、做出决策并适应新信息。
处理困难情况：如果面试官不够合作，保持专业，尽力进行建设性的交流。
在日常工作中应用这些原则
定义需求：在编写系统设计文档或启动新项目时至关重要。
范围管理：清晰地定义问题范围有助于提供有效的解决方案。
设计原则：通常以系统质量（如安全性、可用性、性能）来表达设计宗旨。